/*
* generated by Xtext
*/
package org.consoli.customlexerexample.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AttributesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cAttributesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_0 = (RuleCall)cAttributesAssignment.eContents().get(0);
		
		//Model:
		//
		//	attributes+=Attribute*;
		public ParserRule getRule() { return rule; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment() { return cAttributesAssignment; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_0() { return cAttributesAttributeParserRuleCall_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Attribute:
		//
		//	SimpleAttribute | ArrayAttribute;
		public ParserRule getRule() { return rule; }

		//SimpleAttribute | ArrayAttribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleAttribute
		public RuleCall getSimpleAttributeParserRuleCall_0() { return cSimpleAttributeParserRuleCall_0; }

		//ArrayAttribute
		public RuleCall getArrayAttributeParserRuleCall_1() { return cArrayAttributeParserRuleCall_1; }
	}

	public class SimpleAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePROPERTY_VALUETerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SimpleAttribute:
		//
		//	name=ID "=" value=PROPERTY_VALUE;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=PROPERTY_VALUE
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=PROPERTY_VALUE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//PROPERTY_VALUE
		public RuleCall getValuePROPERTY_VALUETerminalRuleCall_2_0() { return cValuePROPERTY_VALUETerminalRuleCall_2_0; }
	}

	public class ArrayAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cItemsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cItemsSTRINGTerminalRuleCall_4_0 = (RuleCall)cItemsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cItemsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cItemsSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cItemsAssignment_5_1.eContents().get(0);
		
		//ArrayAttribute:
		//
		//	name=ID "[" "]" "=" items+=STRING? ("," items+=STRING)*;
		public ParserRule getRule() { return rule; }

		//name=ID "[" "]" "=" items+=STRING? ("," items+=STRING)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//items+=STRING?
		public Assignment getItemsAssignment_4() { return cItemsAssignment_4; }

		//STRING
		public RuleCall getItemsSTRINGTerminalRuleCall_4_0() { return cItemsSTRINGTerminalRuleCall_4_0; }

		//("," items+=STRING)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//items+=STRING
		public Assignment getItemsAssignment_5_1() { return cItemsAssignment_5_1; }

		//STRING
		public RuleCall getItemsSTRINGTerminalRuleCall_5_1_0() { return cItemsSTRINGTerminalRuleCall_5_1_0; }
	}
	
	
	private ModelElements pModel;
	private AttributeElements pAttribute;
	private SimpleAttributeElements pSimpleAttribute;
	private ArrayAttributeElements pArrayAttribute;
	private TerminalRule tPROPERTY_VALUE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AttributesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.consoli.customlexerexample.Attributes".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	attributes+=Attribute*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Attribute:
	//
	//	SimpleAttribute | ArrayAttribute;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//SimpleAttribute:
	//
	//	name=ID "=" value=PROPERTY_VALUE;
	public SimpleAttributeElements getSimpleAttributeAccess() {
		return (pSimpleAttribute != null) ? pSimpleAttribute : (pSimpleAttribute = new SimpleAttributeElements());
	}
	
	public ParserRule getSimpleAttributeRule() {
		return getSimpleAttributeAccess().getRule();
	}

	//ArrayAttribute:
	//
	//	name=ID "[" "]" "=" items+=STRING? ("," items+=STRING)*;
	public ArrayAttributeElements getArrayAttributeAccess() {
		return (pArrayAttribute != null) ? pArrayAttribute : (pArrayAttribute = new ArrayAttributeElements());
	}
	
	public ParserRule getArrayAttributeRule() {
		return getArrayAttributeAccess().getRule();
	}

	//terminal PROPERTY_VALUE:
	//
	//	!("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getPROPERTY_VALUERule() {
		return (tPROPERTY_VALUE != null) ? tPROPERTY_VALUE : (tPROPERTY_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PROPERTY_VALUE"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
