/*
* generated by Xtext
*/
parser grammar InternalAttributesParser;

options {
	tokenVocab=InternalAttributesLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.consoli.customlexerexample.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.consoli.customlexerexample.services.AttributesGrammarAccess;

}

@members {


	private AttributesGrammarAccess grammarAccess;
	 	
	public InternalAttributesParser(TokenStream input, AttributesGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Model";	
	} 
	   	   	
	@Override
	protected AttributesGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAttributesAttributeParserRuleCall_0()); 
	    }
		lv_attributes_0_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_0_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getSimpleAttributeParserRuleCall_0()); 
    }
    this_SimpleAttribute_0=ruleSimpleAttribute
    {
        $current = $this_SimpleAttribute_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getArrayAttributeParserRuleCall_1()); 
    }
    this_ArrayAttribute_1=ruleArrayAttribute
    {
        $current = $this_ArrayAttribute_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimpleAttribute
entryRuleSimpleAttribute returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimpleAttributeRule()); }
	 iv_ruleSimpleAttribute=ruleSimpleAttribute 
	 { $current=$iv_ruleSimpleAttribute.current; } 
	 EOF 
;

// Rule SimpleAttribute
ruleSimpleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSimpleAttributeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		lv_value_1_0=RULE_PROPERTY_VALUE
		{
			newLeafNode(lv_value_1_0, grammarAccess.getSimpleAttributeAccess().getValuePROPERTY_VALUETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"PROPERTY_VALUE");
	    }

)
))
;





// Entry rule entryRuleArrayAttribute
entryRuleArrayAttribute returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrayAttributeRule()); }
	 iv_ruleArrayAttribute=ruleArrayAttribute 
	 { $current=$iv_ruleArrayAttribute.current; } 
	 EOF 
;

// Rule ArrayAttribute
ruleArrayAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getArrayAttributeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
	otherlv_1=KEYWORD_3
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayAttributeAccess().getLeftSquareBracketKeyword_1());
    }

	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayAttributeAccess().getRightSquareBracketKeyword_2());
    }

	otherlv_3=KEYWORD_2
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayAttributeAccess().getEqualsSignKeyword_3());
    }
(
(
		lv_items_4_0=RULE_STRING
		{
			newLeafNode(lv_items_4_0, grammarAccess.getArrayAttributeAccess().getItemsSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayAttributeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"STRING");
	    }

)
)?(
	otherlv_5=KEYWORD_1
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayAttributeAccess().getCommaKeyword_5_0());
    }
(
(
		lv_items_6_0=RULE_STRING
		{
			newLeafNode(lv_items_6_0, grammarAccess.getArrayAttributeAccess().getItemsSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayAttributeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"items",
        		lv_items_6_0, 
        		"STRING");
	    }

)
))*)
;





