/*
* generated by Xtext
*/
grammar InternalAttributes;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.consoli.customlexerexample.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.consoli.customlexerexample.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.consoli.customlexerexample.services.AttributesGrammarAccess;

}

@parser::members {
 
 	private AttributesGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AttributesGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getAttributesAssignment()); }
(rule__Model__AttributesAssignment)*
{ after(grammarAccess.getModelAccess().getAttributesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getAlternatives()); }
(rule__Attribute__Alternatives)
{ after(grammarAccess.getAttributeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleAttribute
entryRuleSimpleAttribute 
:
{ before(grammarAccess.getSimpleAttributeRule()); }
	 ruleSimpleAttribute
{ after(grammarAccess.getSimpleAttributeRule()); } 
	 EOF 
;

// Rule SimpleAttribute
ruleSimpleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleAttributeAccess().getGroup()); }
(rule__SimpleAttribute__Group__0)
{ after(grammarAccess.getSimpleAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayAttribute
entryRuleArrayAttribute 
:
{ before(grammarAccess.getArrayAttributeRule()); }
	 ruleArrayAttribute
{ after(grammarAccess.getArrayAttributeRule()); } 
	 EOF 
;

// Rule ArrayAttribute
ruleArrayAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayAttributeAccess().getGroup()); }
(rule__ArrayAttribute__Group__0)
{ after(grammarAccess.getArrayAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Attribute__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getSimpleAttributeParserRuleCall_0()); }
	ruleSimpleAttribute
{ after(grammarAccess.getAttributeAccess().getSimpleAttributeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAttributeAccess().getArrayAttributeParserRuleCall_1()); }
	ruleArrayAttribute
{ after(grammarAccess.getAttributeAccess().getArrayAttributeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__SimpleAttribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleAttribute__Group__0__Impl
	rule__SimpleAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAttribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleAttributeAccess().getNameAssignment_0()); }
(rule__SimpleAttribute__NameAssignment_0)
{ after(grammarAccess.getSimpleAttributeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleAttribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleAttribute__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAttribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleAttributeAccess().getValueAssignment_1()); }
(rule__SimpleAttribute__ValueAssignment_1)
{ after(grammarAccess.getSimpleAttributeAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayAttribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAttribute__Group__0__Impl
	rule__ArrayAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAttribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAttributeAccess().getNameAssignment_0()); }
(rule__ArrayAttribute__NameAssignment_0)
{ after(grammarAccess.getArrayAttributeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayAttribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAttribute__Group__1__Impl
	rule__ArrayAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAttribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAttributeAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getArrayAttributeAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayAttribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAttribute__Group__2__Impl
	rule__ArrayAttribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAttribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAttributeAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getArrayAttributeAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayAttribute__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAttribute__Group__3__Impl
	rule__ArrayAttribute__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAttribute__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAttributeAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getArrayAttributeAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayAttribute__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAttribute__Group__4__Impl
	rule__ArrayAttribute__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAttribute__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAttributeAccess().getItemsAssignment_4()); }
(rule__ArrayAttribute__ItemsAssignment_4)?
{ after(grammarAccess.getArrayAttributeAccess().getItemsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayAttribute__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAttribute__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAttribute__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAttributeAccess().getGroup_5()); }
(rule__ArrayAttribute__Group_5__0)*
{ after(grammarAccess.getArrayAttributeAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ArrayAttribute__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAttribute__Group_5__0__Impl
	rule__ArrayAttribute__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAttribute__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAttributeAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getArrayAttributeAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayAttribute__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayAttribute__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAttribute__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAttributeAccess().getItemsAssignment_5_1()); }
(rule__ArrayAttribute__ItemsAssignment_5_1)
{ after(grammarAccess.getArrayAttributeAccess().getItemsAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__AttributesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAttributesAttributeParserRuleCall_0()); }
	ruleAttribute{ after(grammarAccess.getModelAccess().getAttributesAttributeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAttribute__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleAttributeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSimpleAttributeAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleAttribute__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleAttributeAccess().getValuePROPERTY_VALUETerminalRuleCall_1_0()); }
	RULE_PROPERTY_VALUE{ after(grammarAccess.getSimpleAttributeAccess().getValuePROPERTY_VALUETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAttribute__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAttributeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getArrayAttributeAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAttribute__ItemsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAttributeAccess().getItemsSTRINGTerminalRuleCall_4_0()); }
	RULE_STRING{ after(grammarAccess.getArrayAttributeAccess().getItemsSTRINGTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayAttribute__ItemsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAttributeAccess().getItemsSTRINGTerminalRuleCall_5_1_0()); }
	RULE_STRING{ after(grammarAccess.getArrayAttributeAccess().getItemsSTRINGTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_PROPERTY_VALUE : '=' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


